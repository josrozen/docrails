h2. Interface d'interrogation d'Active Record

Ce guide présente différentes façons d'obtenir des données d'une base de données avec Active Record. En vous reportant à ce guide, vous pourrez :

* trouver des enregistrements en utilisant plusieurs méthodes et conditions,
* spécifier l'ordre, les attributs retournés, le groupement et d'autres propriétés des enregistrements obtenus,
* utiliser l'"eager loading" (chargement avide) pour réduire le nombre de requêtes vers la base pour obtenir des données,
* utiliser des méthodes de recherche dynamiques,
* vérifier l'existence d'enregistrements particuliers,
* effectuer divers calculs sur les modèles Active Record.

endprologue.

WARNING. Ce guide utilise Rails 3.0. Une partie du code montré ici ne fonctionne pas avec les versions précédentes de Rails.

Si vous avez l'habitude d'utiliser directement le SQL pour obtenir des enregistrements alors, d'une manière générale, vous verrez qu'il y a de meilleures façons de faire ces opérations en Rails. Active Record vous isole le plus souvent de l'utilisation de SQL.

Les exemples de code dans ce guide font référence à l'un, ou plusieurs, des modèles suivants :

TIP: Tous les modèles suivants utilisent +id+ comme clef primaire, sauf indication contraire.

<ruby>
class Client < ActiveRecord::Base
  has_one :address
  has_many :orders
  has_and_belongs_to_many :roles
end
</ruby>

<ruby>
class Address < ActiveRecord::Base
  belongs_to :client
end
</ruby>

<ruby>
class Order < ActiveRecord::Base
  belongs_to :client, :counter_cache => true
end
</ruby>

<ruby>
class Role < ActiveRecord::Base
  has_and_belongs_to_many :clients
end
</ruby>

Active Record effectue des requêtes sur une base de données pour vous et est compatible avec la plupart des moteurs (MySQL, PostgreSQL et SQLite pour en nommer quelques-uns). Indépendamment du moteur utilisé, le format des méthodes Active Record reste le même.

h3. Obtenir des objets depuis la base de données

Pour obtenir des objets de la base de données, Active Record fournit plusieurs méthodes "finder" (de recherche). Chaque méthode accepte des arguments pour effectuer des requêtes sur la base sans écrire directement du SQL.

Ces méthodes sont :
* +where+
* +select+
* +group+
* +order+
* +limit+
* +offset+
* +joins+
* +includes+
* +lock+
* +readonly+
* +from+
* +having+

Toutes ces méthodes retournent une instance de <tt>ActiveRecord::Relation</tt>.

Le fonctionnement d'une opération comme <tt>Model.find(options)</tt> peut-être résumé par :

* convertir les options fournies dans leur équivalent SQL,
* exécuter la requête SQL et obtenir les résultats correspondants depuis la base,
* instancier l'objet Ruby équivalent du modèle approprié pour chacune des rangées résultantes,
* appeler les callbacks +after_find+ éventuels.

h4. Obtention d'un objet unique

Active Record vous permet d'obtenir un objet unique de 3 façons.

h5. Utilisation d'une clef primaire

En utilisant <tt>Model.find(primary_key)</tt>, vous pouvez obtenir l'objet correspondant à la _primary key_ passée et correspondant aux options éventuelles. Ainsi :

<ruby>
# Find the client with primary key (id) 10.
client = Client.find(10)
=> #<Client id: 10, first_name: => "Ryan">
</ruby>

L'équivalent SQL de ce qui précède est :

<sql>
SELECT * FROM clients WHERE (clients.id = 10)
</sql>

<tt>Model.find(primary_key)</tt> déclenchera une exception +ActiveRecord::RecordNotFound+ si aucun enregistrement correspondant n'est trouvé.

h5. +first+

<tt>Model.first</tt> trouve le premier enregistrement correspondant aux options. Ainsi :

<ruby>
client = Client.first
=> #<Client id: 1, first_name: "Lifo">
</ruby>

L'équivalent SQL de ce qui précède est :

<sql>
SELECT * FROM clients LIMIT 1
</sql>

<tt>Model.first</tt> renvoie +nil+ si aucun enregistrement correspondant n'est trouvé. Aucune exception n'est déclenchée.

h5. +last+

<tt>Model.last</tt> trouve le dernier enregistrement correspondant aux options. Ainsi :

<ruby>
client = Client.last
=> #<Client id: 221, first_name: "Russel">
</ruby>

L'équivalent SQL de ce qui précède est :

<sql>
SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1
</sql>

<tt>Model.last</tt> renvoie +nil+ si aucun enregistrement correspondant n'est trouvé. Aucune exception n'est déclenchée.

h4. Obtention de plusieurs objets

h5. Utilisation de plusieurs clefs primaires

<tt>Model.find(array_of_primary_key)</tt> accepte également un tableau de _primary keys_. Un tableau de tous les enregistrements correspondants aux clefs passées est retourné. Par exemple :

<ruby>
# Find the clients with primary keys 1 and 10.
client = Client.find(1, 10) # Or even Client.find([1, 10])
=> [#<Client id: 1, first_name: => "Lifo">, #<Client id: 10, first_name: => "Ryan">]
</ruby>

L'équivalent SQL de ce qui précède est :

<sql>
SELECT * FROM clients WHERE (clients.id IN (1,10))
</sql>

WARNING: <tt>Model.find(primary_key)</tt> déclenchera une exception +ActiveRecord::RecordNotFound+ à moins qu'un enregistrement correspondant à <strong>toutes</strong> les clefs primaires.

h4. Obtention de plusieurs objets par paquets

Parfois vous devez parcourir un grand nombre d'enregistrements. Par exemple pour envoyer une lettre à tous les utilisateurs, pour exporter des données, etc...

Ce qui suit peut paraître tout à fait convenir à première vue:

<ruby>
# Very inefficient when users table has thousands of rows.
User.all.each do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

Mais si le nombre total d'enregistrements dans la base est très grand cette approche est inefficace voire simplement impossible.

C'est parce que +User.all.each+ demande a Active Record de récupérer _la table entière_, de construire un objet modèle par rangée, et de garder le tableau entier en mémoire. Parfois cela fait tout simplement trop d'objets et demande trop de mémoire.

h5. +find_each+

Pour parcourir efficacement une grande table, Active Record fournit une méthode de recherche par paquets appelée +find_each+:

<ruby>
User.find_each do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Configuration de la taille des paquets*

Derrière le rideau +find_each+ récupère les rangées par parquets de +1000+ et les fournit un par un. La taille de ces paquets est configurable avec l'option +:batch_size+.

Pour récupérer des enregistrements +User+ par paquets de +5000+, il suffit de préciser :

<ruby>
User.find_each(:batch_size => 5000) do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Début de la recherche par paquets à partir d'une clef primaire spécifique*

Les enregistrements sont récupérés en ordre croissant sur la clef primaire, qui doit être un entier. L'option +:start+ permet de configurer le premier ID de la séquence si vous ne souhaitez pas récupérer le premier. Ca peut être utile par exemple pour pouvoir reprendre un traitement interrompu s'il sauvegarde le dernier ID traité comme point de contrôle.

Pour envoyer des lettres uniquement aux utilisateurs dont la clef débute à +2000+:

<ruby>
User.find_each(:batch_size => 5000, :start => 2000) do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*Options supplémentaires*

+find_each+ accept les mêmes options qu'un +find+ standard. Cependant, +:order+ et +:limit+ sont nécessaires pour des besoins internes et donc ne peuvent pas être passés explicitement.

h5. +find_in_batches+

Vous pouvez aussi travailler par bloc plutôt que par rangée avec +find_in_batches+. Cette méthode est semblable à +find_each+, mais fournit des tableaux de modèles à la place :

<ruby>
# Works in chunks of 1000 invoices at a time.
Invoice.find_in_batches(:include => :invoice_lines) do |invoices|
  export.add_invoices(invoices)
end
</ruby>

Ce qui précède fournit des blocs de +1000+ factures à chaque fois.

h3. Conditions

La méthode +find+ vous permet de spécifier des conditions pour limiter les enregistrements retournés, correspondant à la partie +WHERE+ d'une requète SQL. Les conditions peuvent être spécifiées en tant que string, array ou hash.

h4. Conditions en string pure

Si vous souhaitez ajouter des conditions à votre recherche, vous pouvez tout simplement les spécifier directement, comme dans +Client.where("orders_count = '2'")+. Cela trouve tous les clients dont la valeur du cham +orders_count+ est 2.

WARNING: Construire vos conditions sous forme de strings pures peut vous rendre vulnérable aux injections SQL. Par exemple, +Client.where("first_name LIKE '%#{params[:first_name]}%'")+ n'est pas sûr. Reportez vous à la section suivante pour la façon conseillée de spécifier des conditions, avec un array.

h4. Conditions en array

Et si maintenant ce nombre peut varier, fourni par exemple en tant qu'argument de quelque part ? Le find devient quelque chose comme :

<ruby>
Client.where("orders_count = ?", params[:orders])
</ruby>

Active Record utilise le premier élément des conditions et les éléments supplémentaires y remplacent les points d'interrogation +?+.

Pour spécifier deux conditions, vous faites :

<ruby>
Client.where("orders_count = ? AND locked = ?", params[:orders], false)
</ruby>

Dans cet exemple, le premier point d'interrogation est remplacé par la valeur de +params[:orders]+ et le deuxième par la représentation SQL de +false+, qui dépend de l'adaptateur.

La raison pour écrire ce code

<ruby>
Client.where("orders_count = ?", params[:orders])
</ruby>

plutôt que

<ruby>
Client.where("orders_count = #{params[:orders]}")
</ruby>

est la sécurisation des arguments. Mettre la variable directement dans la chaîne de conditions passe la variable *telle quelle*. Cela signifie que c'est une variable "unescaped" (non-échappée) directement depuis un utilisateur, dont les intentions ne sont pas connues. En faisant cela vous soumettez votre base de données à un risque car si un utilisateur découvre qu'il y a une faille, il, ou elle, peut l'exploiter. Ne mettez jamais un argument directement dans une chaîne conditionnelle.

TIP: Pour plus d'information sur les dangers de l'injection SQL, consultez le "Ruby on Rails Security Guide":security.html#sql-injection.

h5. Conditions dans des placeholders 

Similar to the +(?)+ replacement style of params, you can also specify keys/values hash in your array conditions:

<ruby>
Client.where("created_at >= :start_date AND created_at <= :end_date",
  {:start_date => params[:start_date], :end_date => params[:end_date]})
</ruby>

This makes for clearer readability if you have a large number of variable conditions.

h5(#array-range_conditions). Range Conditions

If you're looking for a range inside of a table (for example, users created in a certain timeframe) you can use the conditions option coupled with the +IN+ SQL statement for this. If you had two dates coming in from a controller you could do something like this to look for a range:

<ruby>
Client.where(:created_at => (params[:start_date].to_date)..(params[:end_date].to_date))
</ruby>

This query will generate something similar to the following SQL:

<sql>
  SELECT "clients".* FROM "clients" WHERE ("clients"."created_at" BETWEEN '2010-09-29' AND '2010-11-30')
</sql>

h4. Hash Conditions

Active Record also allows you to pass in hash conditions which can increase the readability of your conditions syntax. With hash conditions, you pass in a hash with keys of the fields you want conditionalised and the values of how you want to conditionalise them:

NOTE: Only equality, range and subset checking are possible with Hash conditions.

h5. Equality Conditions

<ruby>
Client.where(:locked => true)
</ruby>

The field name can also be a string:

<ruby>
Client.where('locked' => true)
</ruby>

h5(#hash-range_conditions). Range Conditions

The good thing about this is that we can pass in a range for our fields without it generating a large query as shown in the preamble of this section.

<ruby>
Client.where(:created_at => (Time.now.midnight - 1.day)..Time.now.midnight)
</ruby>

This will find all clients created yesterday by using a +BETWEEN+ SQL statement:

<sql>
SELECT * FROM clients WHERE (clients.created_at BETWEEN '2008-12-21 00:00:00' AND '2008-12-22 00:00:00')
</sql>

This demonstrates a shorter syntax for the examples in "Array Conditions":#array-conditions

h5. Subset Conditions

If you want to find records using the +IN+ expression you can pass an array to the conditions hash:

<ruby>
Client.where(:orders_count => [1,3,5])
</ruby>

This code will generate SQL like this:

<sql>
SELECT * FROM clients WHERE (clients.orders_count IN (1,3,5))
</sql>

h3. Ordering

To retrieve records from the database in a specific order, you can use the +order+ method.

For example, if you're getting a set of records and want to order them in ascending order by the +created_at+ field in your table:

<ruby>
Client.order("created_at")
</ruby>

You could specify +ASC+ or +DESC+ as well:

<ruby>
Client.order("created_at DESC")
# OR
Client.order("created_at ASC")
</ruby>

Or ordering by multiple fields:

<ruby>
Client.order("orders_count ASC, created_at DESC")
</ruby>

h3. Selecting Specific Fields

By default, <tt>Model.find</tt> selects all the fields from the result set using +select *+.

To select only a subset of fields from the result set, you can specify the subset via the +select+ method.

NOTE: If the +select+ method is used, all the returning objects will be "read only":#readonly-objects.

<br />

For example, to select only +viewable_by+ and +locked+ columns:

<ruby>
Client.select("viewable_by, locked")
</ruby>

The SQL query used by this find call will be somewhat like:

<sql>
SELECT viewable_by, locked FROM clients
</sql>

Be careful because this also means you're initializing a model object with only the fields that you've selected. If you attempt to access a field that is not in the initialized record you'll receive:

<shell>
ActiveRecord::MissingAttributeError: missing attribute: <attribute>
</shell>

Where +&lt;attribute&gt;+ is the attribute you asked for. The +id+ method will not raise the +ActiveRecord::MissingAttributeError+, so just be careful when working with associations because they need the +id+ method to function properly.

You can also call SQL functions within the select option. For example, if you would like to only grab a single record per unique value in a certain field by using the +DISTINCT+ function you can do it like this:

<ruby>
Client.select("DISTINCT(name)")
</ruby>

h3. Limit and Offset

To apply +LIMIT+ to the SQL fired by the +Model.find+, you can specify the +LIMIT+ using +limit+ and +offset+ methods on the relation.

You can use +limit+ to specify the number of records to be retrieved, and use +offset+ to specify the number of records to skip before starting to return the records. For example

<ruby>
Client.limit(5)
</ruby>

will return a maximum of 5 clients and because it specifies no offset it will return the first 5 in the table. The SQL it executes looks like this:

<sql>
SELECT * FROM clients LIMIT 5
</sql>

Adding +offset+ to that

<ruby>
Client.limit(5).offset(30)
</ruby>

will return instead a maximum of 5 clients beginning with the 31st. The SQL looks like:

<sql>
SELECT * FROM clients LIMIT 5, 30
</sql>

h3. Group

To apply a +GROUP BY+ clause to the SQL fired by the finder, you can specify the +group+ method on the find.

For example, if you want to find a collection of the dates orders were created on:

<ruby>
Order.group("date(created_at)").order("created_at")
</ruby>

And this will give you a single +Order+ object for each date where there are orders in the database.

The SQL that would be executed would be something like this:

<sql>
SELECT * FROM orders GROUP BY date(created_at) ORDER BY created_at
</sql>

h3. Having

SQL uses the +HAVING+ clause to specify conditions on the +GROUP BY+ fields. You can add the +HAVING+ clause to the SQL fired by the +Model.find+ by adding the +:having+ option to the find.

For example:

<ruby>
Order.group("date(created_at)").having("created_at > ?", 1.month.ago)
</ruby>

The SQL that would be executed would be something like this:

<sql>
SELECT * FROM orders GROUP BY date(created_at) HAVING created_at > '2009-01-15'
</sql>

This will return single order objects for each day, but only for the last month.

h3. Overriding Conditions

You can specify certain conditions to be excepted by using the +except+ method.

For example:

<ruby>
Post.where('id > 10').limit(20).order('id asc').except(:order)
</ruby>

The SQL that would be executed:

<sql>
SELECT * FROM posts WHERE id > 10 LIMIT 20
</sql>

You can also override conditions using the +only+ method.

For example:

<ruby>
Post.where('id > 10').limit(20).order('id desc').only(:order, :where)
</ruby>

The SQL that would be executed:

<sql>
SELECT * FROM posts WHERE id > 10 ORDER BY id DESC
</sql>

h3. Readonly Objects

Active Record provides +readonly+ method on a relation to explicitly disallow modification or deletion of any of the returned object. Any attempt to alter or destroy a readonly record will not succeed, raising an +ActiveRecord::ReadOnlyRecord+ exception.

<ruby>
client = Client.readonly.first
client.visits += 1
client.save
</ruby>

As +client+ is explicitly set to be a readonly object, the above code will raise an +ActiveRecord::ReadOnlyRecord+ exception when calling +client.save+ with an updated value of _visits_.

h3. Locking Records for Update

Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.

Active Record provides two locking mechanisms:

* Optimistic Locking
* Pessimistic Locking

h4. Optimistic Locking

Optimistic locking allows multiple users to access the same record for edits, and assumes a minimum of conflicts with the data.  It does this by checking whether another process has made changes to a record since it was opened. An +ActiveRecord::StaleObjectError+ exception is thrown if that has occurred and the update is ignored.

<strong>Optimistic locking column</strong>

In order to use optimistic locking, the table needs to have a column called +lock_version+. Each time the record is updated, Active Record increments the +lock_version+ column. If an update request is made with a lower value in the +lock_version+ field than is currently in the +lock_version+ column in the database, the update request will fail with an +ActiveRecord::StaleObjectError+. Example:

<ruby>
c1 = Client.find(1)
c2 = Client.find(1)

c1.first_name = "Michael"
c1.save

c2.name = "should fail"
c2.save # Raises a ActiveRecord::StaleObjectError
</ruby>

You're then responsible for dealing with the conflict by rescuing the exception and either rolling back, merging, or otherwise apply the business logic needed to resolve the conflict.

NOTE: You must ensure that your database schema defaults the +lock_version+ column to +0+.

<br />

This behavior can be turned off by setting <tt>ActiveRecord::Base.lock_optimistically = false</tt>.

To override the name of the +lock_version+ column, +ActiveRecord::Base+ provides a class method called +set_locking_column+:

<ruby>
class Client < ActiveRecord::Base
  set_locking_column :lock_client_column
end
</ruby>

h4. Pessimistic Locking

Pessimistic locking uses a locking mechanism provided by the underlying database. Using +lock+ when building a relation obtains an exclusive lock on the selected rows. Relations using +lock+ are usually wrapped inside a transaction for preventing deadlock conditions.

For example:

<ruby>
Item.transaction do
  i = Item.lock.first
  i.name = 'Jones'
  i.save
end
</ruby>

The above session produces the following SQL for a MySQL backend:

<sql>
SQL (0.2ms)   BEGIN
Item Load (0.3ms)   SELECT * FROM `items` LIMIT 1 FOR UPDATE
Item Update (0.4ms)   UPDATE `items` SET `updated_at` = '2009-02-07 18:05:56', `name` = 'Jones' WHERE `id` = 1
SQL (0.8ms)   COMMIT
</sql>

You can also pass raw SQL to the +lock+ method for allowing different types of locks. For example, MySQL has an expression called +LOCK IN SHARE MODE+ where you can lock a record but still allow other queries to read it. To specify this expression just pass it in as the lock option:

<ruby>
Item.transaction do
  i = Item.lock("LOCK IN SHARE MODE").find(1)
  i.increment!(:views)
end
</ruby>

h3. Joining Tables

Active Record provides a finder method called +joins+ for specifying +JOIN+ clauses on the resulting SQL. There are multiple ways to use the +joins+ method.

h4. Using a String SQL Fragment

You can just supply the raw SQL specifying the +JOIN+ clause to +joins+:

<ruby>
Client.joins('LEFT OUTER JOIN addresses ON addresses.client_id = clients.id')
</ruby>

This will result in the following SQL:

<sql>
SELECT clients.* FROM clients LEFT OUTER JOIN addresses ON addresses.client_id = clients.id
</sql>

h4. Using Array/Hash of Named Associations

WARNING: This method only works with +INNER JOIN+.

Active Record lets you use the names of the "associations":association_basics.html defined on the model as a shortcut for specifying +JOIN+ clause for those associations when using the +joins+ method.

For example, consider the following +Category+, +Post+, +Comments+ and +Guest+ models:

<ruby>
class Category < ActiveRecord::Base
  has_many :posts
end

class Post < ActiveRecord::Base
  belongs_to :category
  has_many :comments
  has_many :tags
end

class Comments < ActiveRecord::Base
  belongs_to :post
  has_one :guest
end

class Guest < ActiveRecord::Base
  belongs_to :comment
end
</ruby>

Now all of the following will produce the expected join queries using +INNER JOIN+:

h5. Joining a Single Association

<ruby>
Category.joins(:posts)
</ruby>

This produces:

<sql>
SELECT categories.* FROM categories
  INNER JOIN posts ON posts.category_id = categories.id
</sql>

h5. Joining Multiple Associations

<ruby>
Post.joins(:category, :comments)
</ruby>

This produces:

<sql>
SELECT posts.* FROM posts
  INNER JOIN categories ON posts.category_id = categories.id
  INNER JOIN comments ON comments.post_id = posts.id
</sql>

h5. Joining Nested Associations (Single Level)

<ruby>
Post.joins(:comments => :guest)
</ruby>

h5. Joining Nested Associations (Multiple Level)

<ruby>
Category.joins(:posts => [{:comments => :guest}, :tags])
</ruby>

h4. Specifying Conditions on the Joined Tables

You can specify conditions on the joined tables using the regular "Array":#array-conditions and "String":#pure-string-conditions conditions. "Hash conditions":#hash-conditions provides a special syntax for specifying conditions for the joined tables:

<ruby>
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Client.joins(:orders).where('orders.created_at' => time_range)
</ruby>

An alternative and cleaner syntax is to nest the hash conditions:

<ruby>
time_range = (Time.now.midnight - 1.day)..Time.now.midnight
Client.joins(:orders).where(:orders => {:created_at => time_range})
</ruby>

This will find all clients who have orders that were created yesterday, again using a +BETWEEN+ SQL expression.

h3. Eager Loading Associations

Eager loading is the mechanism for loading the associated records of the objects returned by +Model.find+ using as few queries as possible.

<strong>N <plus> 1 queries problem</strong>

Consider the following code, which finds 10 clients and prints their postcodes:

<ruby>
clients = Client.limit(10)

clients.each do |client|
  puts client.address.postcode
end
</ruby>

This code looks fine at the first sight. But the problem lies within the total number of queries executed. The above code executes 1 ( to find 10 clients ) <plus> 10 ( one per each client to load the address ) = <strong>11</strong> queries in total.

<strong>Solution to N <plus> 1 queries problem</strong>

Active Record lets you specify in advance all the associations that are going to be loaded. This is possible by specifying the +includes+ method of the +Model.find+ call. With +includes+, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries.

Revisiting the above case, we could rewrite +Client.all+ to use eager load addresses:

<ruby>
clients = Client.includes(:address).limit(10)

clients.each do |client|
  puts client.address.postcode
end
</ruby>

The above code will execute just <strong>2</strong> queries, as opposed to <strong>11</strong> queries in the previous case:

<sql>
SELECT * FROM clients LIMIT 10
SELECT addresses.* FROM addresses
  WHERE (addresses.client_id IN (1,2,3,4,5,6,7,8,9,10))
</sql>

h4. Eager Loading Multiple Associations

Active Record lets you eager load any number of associations with a single +Model.find+ call by using an array, hash, or a nested hash of array/hash with the +includes+ method.

h5. Array of Multiple Associations

<ruby>
Post.includes(:category, :comments)
</ruby>

This loads all the posts and the associated category and comments for each post.

h5. Nested Associations Hash

<ruby>
Category.includes(:posts => [{:comments => :guest}, :tags]).find(1)
</ruby>

This will find the category with id 1 and eager load all of the associated posts, the associated posts' tags and comments, and every comment's guest association.

h4. Specifying Conditions on Eager Loaded Associations

Even though Active Record lets you specify conditions on the eager loaded associations just like +joins+, the recommended way is to use "joins":#joining-tables instead.

h3. Scopes

Scoping allows you to specify commonly-used ARel queries which can be referenced as method calls on the association objects or models. With these scopes, you can use every method previously covered such as +where+, +joins+ and +includes+. All scope methods will return an +ActiveRecord::Relation+ object which will allow for further methods (such as other scopes) to be called on it.

To define a simple scope, we use the +scope+ method inside the class, passing the ARel query that we'd like run when this scope is called:

<ruby>
class Post < ActiveRecord::Base
  scope :published, where(:published => true)
end
</ruby>

Just like before, these methods are also chainable:

<ruby>
class Post < ActiveRecord::Base
  scope :published, where(:published => true).joins(:category)
end
</ruby>

Scopes are also chainable within scopes:

<ruby>
class Post < ActiveRecord::Base
  scope :published, where(:published => true)
  scope :published_and_commented, published.and(self.arel_table[:comments_count].gt(0))
end
</ruby>

To call this +published+ scope we can call it on either the class:

<ruby>
Post.published => [published posts]
</ruby>

Or on an association consisting of +Post+ objects:

<ruby>
category = Category.first
category.posts.published => [published posts belonging to this category]
</ruby>

h4. Working with times

If you're working with dates or times within scopes, due to how they are evaluated, you will need to use a lambda so that the scope is evaluated every time.

<ruby>
class Post < ActiveRecord::Base
  scope :last_week, lambda { where("created_at < ?", Time.zone.now ) }
end
</ruby>

Without the +lambda+, this +Time.zone.now+ will only be called once.

h4. Passing in arguments

When a +lambda+ is used for a +scope+, it can take arguments:

<ruby>
class Post < ActiveRecord::Base
  scope :1_week_before, lambda { |time| where("created_at < ?", time)
end
</ruby>

This may then be called using this:

<ruby>
Post.1_week_before(Time.zone.now)
</ruby>

However, this is just duplicating the functionality that would be provided to you by a class method.

<ruby>
class Post < ActiveRecord::Base
  def self.1_week_before(time)
    where("created_at < ?", time)
  end
end
</ruby>

Using a class method is the preferred way to accept arguments for scopes. These methods will still be accessible on the association objects:

<ruby>
category.posts.1_week_before(time)
</ruby>

h3. Dynamic Finders

For every field (also known as an attribute) you define in your table, Active Record provides a finder method. If you have a field called +first_name+ on your +Client+ model for example, you get +find_by_first_name+ and +find_all_by_first_name+ for free from Active Record. If you have a +locked+ field on the +Client+ model, you also get +find_by_locked+ and +find_all_by_locked+ methods.

You can also use +find_last_by_*+ methods which will find the last record matching your argument.

You can specify an exclamation point (<tt>!</tt>) on the end of the dynamic finders to get them to raise an +ActiveRecord::RecordNotFound+ error if they do not return any records, like +Client.find_by_name!("Ryan")+

If you want to find both by name and locked, you can chain these finders together by simply typing +and+ between the fields. For example, +Client.find_by_first_name_and_locked("Ryan", true)+.


There's another set of dynamic finders that let you find or create/initialize objects if they aren't found. These work in a similar fashion to the other finders and can be used like +find_or_create_by_first_name(params[:first_name])+. Using this will first perform a find and then create if the find returns +nil+. The SQL looks like this for +Client.find_or_create_by_first_name("Ryan")+:

<sql>
SELECT * FROM clients WHERE (clients.first_name = 'Ryan') LIMIT 1
BEGIN
INSERT INTO clients (first_name, updated_at, created_at, orders_count, locked)
  VALUES('Ryan', '2008-09-28 15:39:12', '2008-09-28 15:39:12', 0, '0')
COMMIT
</sql>

+find_or_create+'s sibling, +find_or_initialize+, will find an object and if it does not exist will act similarly to calling +new+ with the arguments you passed in. For example:

<ruby>
client = Client.find_or_initialize_by_first_name('Ryan')
</ruby>

will either assign an existing client object with the name "Ryan" to the client local variable, or initialize a new object similar to calling +Client.new(:first_name => 'Ryan')+. From here, you can modify other fields in client by calling the attribute setters on it: +client.locked = true+ and when you want to write it to the database just call +save+ on it.

h3. Finding by SQL

If you'd like to use your own SQL to find records in a table you can use +find_by_sql+. The +find_by_sql+ method will return an array of objects even if the underlying query returns just a single record. For example you could run this query:

<ruby>
Client.find_by_sql("SELECT * FROM clients
  INNER JOIN orders ON clients.id = orders.client_id
  ORDER clients.created_at desc")
</ruby>

+find_by_sql+ provides you with a simple way of making custom calls to the database and retrieving instantiated objects.

h3. +select_all+

<tt>find_by_sql</tt> has a close relative called +connection#select_all+. +select_all+ will retrieve objects from the database using custom SQL just like +find_by_sql+ but will not instantiate them. Instead, you will get an array of hashes where each hash indicates a record.

<ruby>
Client.connection.select_all("SELECT * FROM clients WHERE id = '1'")
</ruby>

h3. Existence of Objects

If you simply want to check for the existence of the object there's a method called +exists?+. This method will query the database using the same query as +find+, but instead of returning an object or collection of objects it will return either +true+ or +false+.

<ruby>
Client.exists?(1)
</ruby>

The +exists?+ method also takes multiple ids, but the catch is that it will return true if any one of those records exists.

<ruby>
Client.exists?(1,2,3)
# or
Client.exists?([1,2,3])
</ruby>

It's even possible to use +exists?+ without any arguments on a model or a relation.

<ruby>
Client.where(:first_name => 'Ryan').exists?
</ruby>

The above returns +true+ if there is at least one client with the +first_name+ 'Ryan' and +false+ otherwise.

<ruby>
Client.exists?
</ruby>

The above returns +false+ if the +clients+ table is empty and +true+ otherwise.

h3. Calculations

This section uses count as an example method in this preamble, but the options described apply to all sub-sections.

All calculation methods work directly on a model:

<ruby>
Client.count
# SELECT count(*) AS count_all FROM clients
</ruby>

Or on a relation :

<ruby>
Client.where(:first_name => 'Ryan').count
# SELECT count(*) AS count_all FROM clients WHERE (first_name = 'Ryan')
</ruby>

You can also use various finder methods on a relation for performing complex calculations:

<ruby>
Client.includes("orders").where(:first_name => 'Ryan', :orders => {:status => 'received'}).count
</ruby>

Which will execute:

<sql>
SELECT count(DISTINCT clients.id) AS count_all FROM clients
  LEFT OUTER JOIN orders ON orders.client_id = client.id WHERE
  (clients.first_name = 'Ryan' AND orders.status = 'received')
</sql>

h4. Count

If you want to see how many records are in your model's table you could call +Client.count+ and that will return the number. If you want to be more specific and find all the clients with their age present in the database you can use +Client.count(:age)+.

For options, please see the parent section, "Calculations":#calculations.

h4. Average

If you want to see the average of a certain number in one of your tables you can call the +average+ method on the class that relates to the table. This method call will look something like this:

<ruby>
Client.average("orders_count")
</ruby>

This will return a number (possibly a floating point number such as 3.14159265) representing the average value in the field.

For options, please see the parent section, "Calculations":#calculations.

h4. Minimum

If you want to find the minimum value of a field in your table you can call the +minimum+ method on the class that relates to the table. This method call will look something like this:

<ruby>
Client.minimum("age")
</ruby>

For options, please see the parent section, "Calculations":#calculations.

h4. Maximum

If you want to find the maximum value of a field in your table you can call the +maximum+ method on the class that relates to the table. This method call will look something like this:

<ruby>
Client.maximum("age")
</ruby>

For options, please see the parent section, "Calculations":#calculations.

h4. Sum

If you want to find the sum of a field for all records in your table you can call the +sum+ method on the class that relates to the table. This method call will look something like this:

<ruby>
Client.sum("orders_count")
</ruby>

For options, please see the parent section,  "Calculations":#calculations.

h3. Changelog

* December 23 2010: Add documentation for the +scope+ method. "Ryan Bigg":http://ryanbigg.com
* April 7, 2010: Fixed document to validate XHTML 1.0 Strict. "Jaime Iniesta":http://jaimeiniesta.com
* February 3, 2010: Update to Rails 3 by "James Miller":credits.html#bensie
* February 7, 2009: Second version by "Pratik":credits.html#lifo
* December 29 2008: Initial version by "Ryan Bigg":credits.html#radar
